name: Build and Test
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      example-parameter:
        description: "Example parameter for manual trigger"
        required: false

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres_db:
        image: postgres:16
        env:
          POSTGRES_DB: my_test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      - name: Apply Database Migrations
        env:
          SECURITY__JWT_SECRET_KEY: very-not-secret
          DATABASE__HOSTNAME: localhost
          DATABASE__PORT: 5432
          DATABASE__DB: my_test_db
          DATABASE__USERNAME: postgres
          DATABASE__PASSWORD: postgres
          DATABASE_URL: postgresql://postgres:postgres@localhost/my_test_db
        run: |
          alembic upgrade head
      - name: Run tests with coverage
        env:
          SECURITY__JWT_SECRET_KEY: very-not-secret
          DATABASE__HOSTNAME: localhost
          DATABASE__PORT: 5432
          DATABASE__DB: my_test_db
          DATABASE__USERNAME: postgres
          DATABASE__PASSWORD: postgres
        run: |
          pytest app/tests --cov=app --cov-report=xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: coverage.xml
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
